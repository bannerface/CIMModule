//
//  CRC.m
//  
//  This class is in the public domain.
//  Updated and maintained by Deusty Designs and the Mac development community.
//
//
#import "CRC.h"

@implementation CRCOperation

static	UInt16	g_wCRCTable16[] = {	0x0000, 0x1189, 0x2312, 0x329B, 0x4624, 0x57AD, 0x6536, 0x74BF,
                                    0x8C48, 0x9DC1, 0xAF5A, 0xBED3, 0xCA6C, 0xDBE5, 0xE97E, 0xF8F7,
                                    0x1081, 0x0108, 0x3393, 0x221A, 0x56A5, 0x472C, 0x75B7, 0x643E,
                                    0x9CC9, 0x8D40, 0xBFDB, 0xAE52, 0xDAED, 0xCB64, 0xF9FF, 0xE876,
                                    0x2102, 0x308B, 0x0210, 0x1399, 0x6726, 0x76AF, 0x4434, 0x55BD,
                                    0xAD4A, 0xBCC3, 0x8E58, 0x9FD1, 0xEB6E, 0xFAE7, 0xC87C, 0xD9F5,
                                    0x3183, 0x200A, 0x1291, 0x0318, 0x77A7, 0x662E, 0x54B5, 0x453C,
                                    0xBDCB, 0xAC42, 0x9ED9, 0x8F50, 0xFBEF, 0xEA66, 0xD8FD, 0xC974,
                                    0x4204, 0x538D, 0x6116, 0x709F, 0x0420, 0x15A9, 0x2732, 0x36BB,
                                    0xCE4C, 0xDFC5, 0xED5E, 0xFCD7, 0x8868, 0x99E1, 0xAB7A, 0xBAF3,
                                    0x5285, 0x430C, 0x7197, 0x601E, 0x14A1, 0x0528, 0x37B3, 0x263A,
                                    0xDECD, 0xCF44, 0xFDDF, 0xEC56, 0x98E9, 0x8960, 0xBBFB, 0xAA72,
                                    0x6306, 0x728F, 0x4014, 0x519D, 0x2522, 0x34AB, 0x0630, 0x17B9,
                                    0xEF4E, 0xFEC7, 0xCC5C, 0xDDD5, 0xA96A, 0xB8E3, 0x8A78, 0x9BF1,
                                    0x7387, 0x620E, 0x5095, 0x411C, 0x35A3, 0x242A, 0x16B1, 0x0738,
                                    0xFFCF, 0xEE46, 0xDCDD, 0xCD54, 0xB9EB, 0xA862, 0x9AF9, 0x8B70,
                                    0x8408, 0x9581, 0xA71A, 0xB693, 0xC22C, 0xD3A5, 0xE13E, 0xF0B7,
                                    0x0840, 0x19C9, 0x2B52, 0x3ADB, 0x4E64, 0x5FED, 0x6D76, 0x7CFF,
                                    0x9489, 0x8500, 0xB79B, 0xA612, 0xD2AD, 0xC324, 0xF1BF, 0xE036,
                                    0x18C1, 0x0948, 0x3BD3, 0x2A5A, 0x5EE5, 0x4F6C, 0x7DF7, 0x6C7E,
                                    0xA50A, 0xB483, 0x8618, 0x9791, 0xE32E, 0xF2A7, 0xC03C, 0xD1B5,
                                    0x2942, 0x38CB, 0x0A50, 0x1BD9, 0x6F66, 0x7EEF, 0x4C74, 0x5DFD,
                                    0xB58B, 0xA402, 0x9699, 0x8710, 0xF3AF, 0xE226, 0xD0BD, 0xC134,
                                    0x39C3, 0x284A, 0x1AD1, 0x0B58, 0x7FE7, 0x6E6E, 0x5CF5, 0x4D7C,
                                    0xC60C, 0xD785, 0xE51E, 0xF497, 0x8028, 0x91A1, 0xA33A, 0xB2B3,
                                    0x4A44, 0x5BCD, 0x6956, 0x78DF, 0x0C60, 0x1DE9, 0x2F72, 0x3EFB,
                                    0xD68D, 0xC704, 0xF59F, 0xE416, 0x90A9, 0x8120, 0xB3BB, 0xA232,
                                    0x5AC5, 0x4B4C, 0x79D7, 0x685E, 0x1CE1, 0x0D68, 0x3FF3, 0x2E7A,
                                    0xE70E, 0xF687, 0xC41C, 0xD595, 0xA12A, 0xB0A3, 0x8238, 0x93B1,
                                    0x6B46, 0x7ACF, 0x4854, 0x59DD, 0x2D62, 0x3CEB, 0x0E70, 0x1FF9,
                                    0xF78F, 0xE606, 0xD49D, 0xC514, 0xB1AB, 0xA022, 0x92B9, 0x8330,
                                    0x7BC7, 0x6A4E, 0x58D5, 0x495C, 0x3DE3, 0x2C6A, 0x1EF1, 0x0F78};

// CRC table for SDLC/HDLC polynomials X16 + X12 + X5 + 1 (High byte and Low byte reversed)

static	UInt16	g_wCRCTableR16[] = {0x0000, 0x8911, 0x1223, 0x9B32, 0x2446, 0xAD57, 0x3665, 0xBF74,
                                    0x488C, 0xC19D, 0x5AAF, 0xD3BE, 0x6CCA, 0xE5DB, 0x7EE9, 0xF7F8,
                                    0x8110, 0x0801, 0x9333, 0x1A22, 0xA556, 0x2C47, 0xB775, 0x3E64,
                                    0xC99C, 0x408D, 0xDBBF, 0x52AE, 0xEDDA, 0x64CB, 0xFFF9, 0x76E8,
                                    0x0221, 0x8B30, 0x1002, 0x9913, 0x2667, 0xAF76, 0x3444, 0xBD55,
                                    0x4AAD, 0xC3BC, 0x588E, 0xD19F, 0x6EEB, 0xE7FA, 0x7CC8, 0xF5D9,
                                    0x8331, 0x0A20, 0x9112, 0x1803, 0xA777, 0x2E66, 0xB554, 0x3C45,
                                    0xCBBD, 0x42AC, 0xD99E, 0x508F, 0xEFFB, 0x66EA, 0xFDD8, 0x74C9,
                                    0x0442, 0x8D53, 0x1661, 0x9F70, 0x2004, 0xA915, 0x3227, 0xBB36,
                                    0x4CCE, 0xC5DF, 0x5EED, 0xD7FC, 0x6888, 0xE199, 0x7AAB, 0xF3BA,
                                    0x8552, 0x0C43, 0x9771, 0x1E60, 0xA114, 0x2805, 0xB337, 0x3A26,
                                    0xCDDE, 0x44CF, 0xDFFD, 0x56EC, 0xE998, 0x6089, 0xFBBB, 0x72AA,
                                    0x0663, 0x8F72, 0x1440, 0x9D51, 0x2225, 0xAB34, 0x3006, 0xB917,
                                    0x4EEF, 0xC7FE, 0x5CCC, 0xD5DD, 0x6AA9, 0xE3B8, 0x788A, 0xF19B,
                                    0x8773, 0x0E62, 0x9550, 0x1C41, 0xA335, 0x2A24, 0xB116, 0x3807,
                                    0xCFFF, 0x46EE, 0xDDDC, 0x54CD, 0xEBB9, 0x62A8, 0xF99A, 0x708B,
                                    0x0884, 0x8195, 0x1AA7, 0x93B6, 0x2CC2, 0xA5D3, 0x3EE1, 0xB7F0,
                                    0x4008, 0xC919, 0x522B, 0xDB3A, 0x644E, 0xED5F, 0x766D, 0xFF7C,
                                    0x8994, 0x0085, 0x9BB7, 0x12A6, 0xADD2, 0x24C3, 0xBFF1, 0x36E0,
                                    0xC118, 0x4809, 0xD33B, 0x5A2A, 0xE55E, 0x6C4F, 0xF77D, 0x7E6C,
                                    0x0AA5, 0x83B4, 0x1886, 0x9197, 0x2EE3, 0xA7F2, 0x3CC0, 0xB5D1,
                                    0x4229, 0xCB38, 0x500A, 0xD91B, 0x666F, 0xEF7E, 0x744C, 0xFD5D,
                                    0x8BB5, 0x02A4, 0x9996, 0x1087, 0xAFF3, 0x26E2, 0xBDD0, 0x34C1,
                                    0xC339, 0x4A28, 0xD11A, 0x580B, 0xE77F, 0x6E6E, 0xF55C, 0x7C4D,
                                    0x0CC6, 0x85D7, 0x1EE5, 0x97F4, 0x2880, 0xA191, 0x3AA3, 0xB3B2,
                                    0x444A, 0xCD5B, 0x5669, 0xDF78, 0x600C, 0xE91D, 0x722F, 0xFB3E,
                                    0x8DD6, 0x04C7, 0x9FF5, 0x16E4, 0xA990, 0x2081, 0xBBB3, 0x32A2,
                                    0xC55A, 0x4C4B, 0xD779, 0x5E68, 0xE11C, 0x680D, 0xF33F, 0x7A2E,
                                    0x0EE7, 0x87F6, 0x1CC4, 0x95D5, 0x2AA1, 0xA3B0, 0x3882, 0xB193,
                                    0x466B, 0xCF7A, 0x5448, 0xDD59, 0x622D, 0xEB3C, 0x700E, 0xF91F,
                                    0x8FF7, 0x06E6, 0x9DD4, 0x14C5, 0xABB1, 0x22A0, 0xB992, 0x3083,
                                    0xC77B, 0x4E6A, 0xD558, 0x5C49, 0xE33D, 0x6A2C, 0xF11E, 0x780F};

// CRC table for SDLC/HDLC polynomials X32 + X26 + X23 + X22 + X16 + X12 + X11 + X10 + X8 + X7 + X5 + X4 + X2 + X + 1

static	UInt32	g_wCRCTable32[] = {	0x00000000, 0x77073096, 0xEE0E612C, 0x990951BA, 0x076DC419, 0x706AF48F, 0xE963A535, 0x9E6495A3,
                                    0x0EDB8832, 0x79DCB8A4, 0xE0D5E91E, 0x97D2D988, 0x09B64C2B, 0x7EB17CBD, 0xE7B82D07, 0x90BF1D91,
                                    0x1DB71064, 0x6AB020F2, 0xF3B97148, 0x84BE41DE, 0x1ADAD47D, 0x6DDDE4EB, 0xF4D4B551, 0x83D385C7,
                                    0x136C9856, 0x646BA8C0, 0xFD62F97A, 0x8A65C9EC, 0x14015C4F, 0x63066CD9, 0xFA0F3D63, 0x8D080DF5,
                                    0x3B6E20C8, 0x4C69105E, 0xD56041E4, 0xA2677172, 0x3C03E4D1, 0x4B04D447, 0xD20D85FD, 0xA50AB56B,
                                    0x35B5A8FA, 0x42B2986C, 0xDBBBC9D6, 0xACBCF940, 0x32D86CE3, 0x45DF5C75, 0xDCD60DCF, 0xABD13D59,
                                    0x26D930AC, 0x51DE003A, 0xC8D75180, 0xBFD06116, 0x21B4F4B5, 0x56B3C423, 0xCFBA9599, 0xB8BDA50F,
                                    0x2802B89E, 0x5F058808, 0xC60CD9B2, 0xB10BE924, 0x2F6F7C87, 0x58684C11, 0xC1611DAB, 0xB6662D3D,
                                    0x76DC4190, 0x01DB7106, 0x98D220BC, 0xEFD5102A, 0x71B18589, 0x06B6B51F, 0x9FBFE4A5, 0xE8B8D433,
                                    0x7807C9A2, 0x0F00F934, 0x9609A88E, 0xE10E9818, 0x7F6A0DBB, 0x086D3D2D, 0x91646C97, 0xE6635C01,
                                    0x6B6B51F4, 0x1C6C6162, 0x856530D8, 0xF262004E, 0x6C0695ED, 0x1B01A57B, 0x8208F4C1, 0xF50FC457,
                                    0x65B0D9C6, 0x12B7E950, 0x8BBEB8EA, 0xFCB9887C, 0x62DD1DDF, 0x15DA2D49, 0x8CD37CF3, 0xFBD44C65,
                                    0x4DB26158, 0x3AB551CE, 0xA3BC0074, 0xD4BB30E2, 0x4ADFA541, 0x3DD895D7, 0xA4D1C46D, 0xD3D6F4FB,
                                    0x4369E96A, 0x346ED9FC, 0xAD678846, 0xDA60B8D0, 0x44042D73, 0x33031DE5, 0xAA0A4C5F, 0xDD0D7CC9,
                                    0x5005713C, 0x270241AA, 0xBE0B1010, 0xC90C2086, 0x5768B525, 0x206F85B3, 0xB966D409, 0xCE61E49F,
                                    0x5EDEF90E, 0x29D9C998, 0xB0D09822, 0xC7D7A8B4, 0x59B33D17, 0x2EB40D81, 0xB7BD5C3B, 0xC0BA6CAD,
                                    0xEDB88320, 0x9ABFB3B6, 0x03B6E20C, 0x74B1D29A, 0xEAD54739, 0x9DD277AF, 0x04DB2615, 0x73DC1683,
                                    0xE3630B12, 0x94643B84, 0x0D6D6A3E, 0x7A6A5AA8, 0xE40ECF0B, 0x9309FF9D, 0x0A00AE27, 0x7D079EB1,
                                    0xF00F9344, 0x8708A3D2, 0x1E01F268, 0x6906C2FE, 0xF762575D, 0x806567CB, 0x196C3671, 0x6E6B06E7,
                                    0xFED41B76, 0x89D32BE0, 0x10DA7A5A, 0x67DD4ACC, 0xF9B9DF6F, 0x8EBEEFF9, 0x17B7BE43, 0x60B08ED5,
                                    0xD6D6A3E8, 0xA1D1937E, 0x38D8C2C4, 0x4FDFF252, 0xD1BB67F1, 0xA6BC5767, 0x3FB506DD, 0x48B2364B,
                                    0xD80D2BDA, 0xAF0A1B4C, 0x36034AF6, 0x41047A60, 0xDF60EFC3, 0xA867DF55, 0x316E8EEF, 0x4669BE79,
                                    0xCB61B38C, 0xBC66831A, 0x256FD2A0, 0x5268E236, 0xCC0C7795, 0xBB0B4703, 0x220216B9, 0x5505262F,
                                    0xC5BA3BBE, 0xB2BD0B28, 0x2BB45A92, 0x5CB36A04, 0xC2D7FFA7, 0xB5D0CF31, 0x2CD99E8B, 0x5BDEAE1D,
                                    0x9B64C2B0, 0xEC63F226, 0x756AA39C, 0x026D930A, 0x9C0906A9, 0xEB0E363F, 0x72076785, 0x05005713,
                                    0x95BF4A82, 0xE2B87A14, 0x7BB12BAE, 0x0CB61B38, 0x92D28E9B, 0xE5D5BE0D, 0x7CDCEFB7, 0x0BDBDF21,
                                    0x86D3D2D4, 0xF1D4E242, 0x68DDB3F8, 0x1FDA836E, 0x81BE16CD, 0xF6B9265B, 0x6FB077E1, 0x18B74777,
                                    0x88085AE6, 0xFF0F6A70, 0x66063BCA, 0x11010B5C, 0x8F659EFF, 0xF862AE69, 0x616BFFD3, 0x166CCF45,
                                    0xA00AE278, 0xD70DD2EE, 0x4E048354, 0x3903B3C2, 0xA7672661, 0xD06016F7, 0x4969474D, 0x3E6E77DB,
                                    0xAED16A4A, 0xD9D65ADC, 0x40DF0B66, 0x37D83BF0, 0xA9BCAE53, 0xDEBB9EC5, 0x47B2CF7F, 0x30B5FFE9,
                                    0xBDBDF21C, 0xCABAC28A, 0x53B39330, 0x24B4A3A6, 0xBAD03605, 0xCDD70693, 0x54DE5729, 0x23D967BF,
                                    0xB3667A2E, 0xC4614AB8, 0x5D681B02, 0x2A6F2B94, 0xB40BBE37, 0xC30C8EA1, 0x5A05DF1B, 0x2D02EF8D};

// CRC table for SDLC/HDLC polynomials X32 + X26 + X23 + X22 + X16 + X12 + X11 + X10 + X8 + X7 + X5 + X4 + X2 + X + 1 (High byte and Low byte reversed)

static  UInt32   g_wCRCTableR32[] = {0x00000000, 0x96300777, 0x2C610EEE, 0xBA510999, 0x19C46D07, 0x8FF46A70, 0x35A563E9, 0xA395649E,
                                    0x3288DB0E, 0xA4B8DC79, 0x1EE9D5E0, 0x88D9D297, 0x2B4CB609, 0xBD7CB17E, 0x072DB8E7, 0x911DBF90,
                                    0x6410B71D, 0xF220B06A, 0x4871B9F3, 0xDE41BE84, 0x7DD4DA1A, 0xEBE4DD6D, 0x51B5D4F4, 0xC785D383,
                                    0x56986C13, 0xC0A86B64, 0x7AF962FD, 0xECC9658A, 0x4F5C0114, 0xD96C0663, 0x633D0FFA, 0xF50D088D,
                                    0xC8206E3B, 0x5E10694C, 0xE44160D5, 0x727167A2, 0xD1E4033C, 0x47D4044B, 0xFD850DD2, 0x6BB50AA5,
                                    0xFAA8B535, 0x6C98B242, 0xD6C9BBDB, 0x40F9BCAC, 0xE36CD832, 0x755CDF45, 0xCF0DD6DC, 0x593DD1AB,
                                    0xAC30D926, 0x3A00DE51, 0x8051D7C8, 0x1661D0BF, 0xB5F4B421, 0x23C4B356, 0x9995BACF, 0x0FA5BDB8,
                                    0x9EB80228, 0x0888055F, 0xB2D90CC6, 0x24E90BB1, 0x877C6F2F, 0x114C6858, 0xAB1D61C1, 0x3D2D66B6,
                                    0x9041DC76, 0x0671DB01, 0xBC20D298, 0x2A10D5EF, 0x8985B171, 0x1FB5B606, 0xA5E4BF9F, 0x33D4B8E8,
                                    0xA2C90778, 0x34F9000F, 0x8EA80996, 0x18980EE1, 0xBB0D6A7F, 0x2D3D6D08, 0x976C6491, 0x015C63E6,
                                    0xF4516B6B, 0x62616C1C, 0xD8306585, 0x4E0062F2, 0xED95066C, 0x7BA5011B, 0xC1F40882, 0x57C40FF5,
                                    0xC6D9B065, 0x50E9B712, 0xEAB8BE8B, 0x7C88B9FC, 0xDF1DDD62, 0x492DDA15, 0xF37CD38C, 0x654CD4FB,
                                    0x5861B24D, 0xCE51B53A, 0x7400BCA3, 0xE230BBD4, 0x41A5DF4A, 0xD795D83D, 0x6DC4D1A4, 0xFBF4D6D3,
                                    0x6AE96943, 0xFCD96E34, 0x468867AD, 0xD0B860DA, 0x732D0444, 0xE51D0333, 0x5F4C0AAA, 0xC97C0DDD,
                                    0x3C710550, 0xAA410227, 0x10100BBE, 0x86200CC9, 0x25B56857, 0xB3856F20, 0x09D466B9, 0x9FE461CE,
                                    0x0EF9DE5E, 0x98C9D929, 0x2298D0B0, 0xB4A8D7C7, 0x173DB359, 0x810DB42E, 0x3B5CBDB7, 0xAD6CBAC0,
                                    0x2083B8ED, 0xB6B3BF9A, 0x0CE2B603, 0x9AD2B174, 0x3947D5EA, 0xAF77D29D, 0x1526DB04, 0x8316DC73,
                                    0x120B63E3, 0x843B6494, 0x3E6A6D0D, 0xA85A6A7A, 0x0BCF0EE4, 0x9DFF0993, 0x27AE000A, 0xB19E077D,
                                    0x44930FF0, 0xD2A30887, 0x68F2011E, 0xFEC20669, 0x5D5762F7, 0xCB676580, 0x71366C19, 0xE7066B6E,
                                    0x761BD4FE, 0xE02BD389, 0x5A7ADA10, 0xCC4ADD67, 0x6FDFB9F9, 0xF9EFBE8E, 0x43BEB717, 0xD58EB060,
                                    0xE8A3D6D6, 0x7E93D1A1, 0xC4C2D838, 0x52F2DF4F, 0xF167BBD1, 0x6757BCA6, 0xDD06B53F, 0x4B36B248,
                                    0xDA2B0DD8, 0x4C1B0AAF, 0xF64A0336, 0x607A0441, 0xC3EF60DF, 0x55DF67A8, 0xEF8E6E31, 0x79BE6946,
                                    0x8CB361CB, 0x1A8366BC, 0xA0D26F25, 0x36E26852, 0x95770CCC, 0x03470BBB, 0xB9160222, 0x2F260555,
                                    0xBE3BBAC5, 0x280BBDB2, 0x925AB42B, 0x046AB35C, 0xA7FFD7C2, 0x31CFD0B5, 0x8B9ED92C, 0x1DAEDE5B,
                                    0xB0C2649B, 0x26F263EC, 0x9CA36A75, 0x0A936D02, 0xA906099C, 0x3F360EEB, 0x85670772, 0x13570005,
                                    0x824ABF95, 0x147AB8E2, 0xAE2BB17B, 0x381BB60C, 0x9B8ED292, 0x0DBED5E5, 0xB7EFDC7C, 0x21DFDB0B,
                                    0xD4D2D386, 0x42E2D4F1, 0xF8B3DD68, 0x6E83DA1F, 0xCD16BE81, 0x5B26B9F6, 0xE177B06F, 0x7747B718,
                                    0xE65A0888, 0x706A0FFF, 0xCA3B0666, 0x5C0B0111, 0xFF9E658F, 0x69AE62F8, 0xD3FF6B61, 0x45CF6C16,
                                    0x78E20AA0, 0xEED20DD7, 0x5483044E, 0xC2B30339, 0x612667A7, 0xF71660D0, 0x4D476949, 0xDB776E3E,
                                    0x4A6AD1AE, 0xDC5AD6D9, 0x660BDF40, 0xF03BD837, 0x53AEBCA9, 0xC59EBBDE, 0x7FCFB247, 0xE9FFB530,
                                    0x1CF2BDBD, 0x8AC2BACA, 0x3093B353, 0xA6A3B424, 0x0536D0BA, 0x9306D7CD, 0x2957DE54, 0xBF67D923,
                                    0x2E7A66B3, 0xB84A61C4, 0x021B685D, 0x942B6F2A, 0x37BE0BB4, 0xA18E0CC3, 0x1BDF055A, 0x8DEF022D};


+ (UInt16) mGetCRC16:(void *)pBuffer dwLength:(UInt32)dwLength{
    
    UInt16 wCRC = 0;
	
    if(pBuffer != nil) for(UInt32 dwIndex = 0; dwIndex < dwLength; ++dwIndex) wCRC = (wCRC >> 8) ^ g_wCRCTable16[((UInt8*)pBuffer)[dwIndex] ^ (UInt8)wCRC];
	return wCRC;
}

+ (UInt16) mGetCRC16Reversed:(void *)pBuffer dwLength:(UInt32)dwLength{
    
    long nIndex;
    UInt16 wCRC = 0;
    
	if(pBuffer != nil) for(nIndex = (long)(dwLength-1); nIndex >= 0; --nIndex) wCRC = (wCRC << 8) ^ g_wCRCTableR16[((UInt8*)pBuffer)[nIndex] ^ (UInt8)(wCRC >> 8)];
	return wCRC;
}

+ (UInt32) mGetCRC32:(void *)pBuffer dwLength:(UInt32)dwLength{
    
    UInt32 dwCRC = 0;
    
	if(pBuffer != nil) for(UInt32 dwIndex = 0; dwIndex < dwLength; ++dwIndex) dwCRC = (dwCRC >> 8) ^ g_wCRCTable32[((UInt8*)pBuffer)[dwIndex] ^ (UInt8)dwCRC];
	return dwCRC;
}

+ (UInt32) mGetCRC32Reversed:(void *)pBuffer dwLength:(UInt32)dwLength{
  
    long nIndex;
    UInt32 dwCRC = 0;
    
	if(pBuffer != nil) for(nIndex = (long)(dwLength-1); nIndex >= 0; --nIndex) dwCRC = (dwCRC << 8) ^ g_wCRCTableR32[((UInt8*)pBuffer)[nIndex] ^ (UInt8)(dwCRC >> 24)];
	return dwCRC;
}

@end
